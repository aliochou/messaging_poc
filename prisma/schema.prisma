// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                    String    @id @default(cuid())
  email                 String    @unique
  username              String?   @unique
  name                  String?
  image                 String?
  publicKey             String    // Base64 encoded public key
  encryptedPrivateKey   String    // Base64 encoded encrypted private key
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Relations
  sentMessages          Message[] @relation("MessageSender")
  conversations         ConversationParticipant[]
  conversationKeys      ConversationKey[]
  createdConversations  Conversation[] @relation("ConversationCreator")

  @@map("users")
}

model Conversation {
  id          String    @id @default(cuid())
  isGroup     Boolean   @default(false)
  name        String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdById String

  // Relations
  createdBy   User      @relation("ConversationCreator", fields: [createdById], references: [id])
  participants ConversationParticipant[]
  messages    Message[]
  keys        ConversationKey[]

  @@map("conversations")
}

model ConversationParticipant {
  id             String @id @default(cuid())
  userId         String
  conversationId String
  role           String @default("member") // "admin", "member"
  joinedAt       DateTime @default(now())

  // Relations
  user           User @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@unique([userId, conversationId])
  @@map("conversation_participants")
}

model ConversationKey {
  id                String @id @default(cuid())
  conversationId    String
  userId            String
  encryptedSymmetricKey String // Base64 encoded encrypted symmetric key

  // Relations
  conversation      Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@map("conversation_keys")
}

model Message {
  id             String   @id @default(cuid())
  conversationId String
  senderId       String
  type           String   @default("text") // "text", "media"
  ciphertext     String   // Base64 encoded encrypted message
  mediaUrl       String?  // For media messages
  status         String   @default("sent") // "sent", "delivered", "read"
  createdAt      DateTime @default(now())

  // Relations
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User @relation("MessageSender", fields: [senderId], references: [id])

  @@map("messages")
} 