// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                    String    @id @default(cuid())
  email                 String    @unique
  username              String?   @unique
  name                  String?
  image                 String?
  emailVerified         DateTime?
  publicKey             String?   // Base64 encoded public key
  encryptedPrivateKey   String?   // Base64 encoded encrypted private key
  csrfToken             String?   // CSRF protection token
  csrfTokenExpiry       DateTime? // CSRF token expiration
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // NextAuth relations
  accounts              Account[]
  sessions              Session[]

  // Relations
  sentMessages          Message[] @relation("MessageSender")
  conversations         ConversationParticipant[]
  conversationKeys      ConversationKey[]
  createdConversations  Conversation[] @relation("ConversationCreator")

  @@map("users")
}

model Conversation {
  id          String    @id @default(cuid())
  isGroup     Boolean   @default(false)
  name        String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdById String

  // Relations
  createdBy   User      @relation("ConversationCreator", fields: [createdById], references: [id])
  participants ConversationParticipant[]
  messages    Message[]
  keys        ConversationKey[]
  salt        ConversationSalt?

  @@map("conversations")
}

model ConversationParticipant {
  id             String @id @default(cuid())
  userId         String
  conversationId String
  role           String @default("member") // "admin", "member"
  joinedAt       DateTime @default(now())

  // Relations
  user           User @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@unique([userId, conversationId])
  @@map("conversation_participants")
}

model ConversationKey {
  id                String @id @default(cuid())
  conversationId    String
  userId            String
  encryptedSymmetricKey String // Base64 encoded encrypted symmetric key

  // Relations
  conversation      Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@map("conversation_keys")
}

model ConversationSalt {
  id             String @id @default(cuid())
  conversationId String @unique
  salt           String // Base64 encoded salt for key derivation

  // Relations
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("conversation_salts")
}

model Message {
  id             String   @id @default(cuid())
  conversationId String
  senderId       String
  type           String   @default("text") // "text", "media"
  ciphertext     String   // Base64 encoded encrypted message
  mediaUrl       String?  // For media messages (encrypted file path)
  thumbnailUrl   String?  // For media messages (encrypted thumbnail path)
  originalFilename String? // Original filename for download
  status         String   @default("sent") // "sent", "delivered", "read"
  createdAt      DateTime @default(now())

  // Relations
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User @relation("MessageSender", fields: [senderId], references: [id])

  @@map("messages")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? 
  access_token       String? 
  expires_at         Int?    
  token_type         String? 
  scope              String? 
  id_token           String? 
  session_state      String? 
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model AuditLog {
  id          String   @id @default(cuid())
  eventType   String   // AuditEventType enum value
  severity    String   // AuditSeverity enum value
  userId      String?
  userEmail   String?
  ipAddress   String?
  userAgent   String?
  details     String   // JSON string of additional details
  timestamp   DateTime @default(now())

  @@map("audit_logs")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
} 